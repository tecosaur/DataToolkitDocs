#+title: The Data REPL

* Getting help

The ~help~ command will give an overview of the data commands available, and one
may call ~help CMD~ for an description of a particular data command.
#+begin_example
data> help
data> help stack
#+end_example

* Acting on the data collection stack

To list the current data collections on the stack, simply call the ~stack~
command with no arguments.

#+begin_example
data> stack
#+end_example

The ~stack~ command also allows you to operate on the data collection stack.
The ~load~ subcommand adds new layer from a data collection specification file,
one may run:

#+begin_example
data> stack load path/to/Data.toml
#+end_example

The freshly loaded data collection will be placed at the top of the stack. Reloading a collection thus moves it to the top of the stack. However, dedicated subcommands exist for moving layers of the data stack.
To move a collection to the top of the stack, one may use the ~promote~ subcommand.
#+begin_example
data> stack promote NAME OR UUID
#+end_example

Similarly, to move a collection down the stack, one may use the ~demote~ subcommand.
#+begin_example
data> stack demote NAME OR UUID
#+end_example

* Looking at data sets in a collection

The available data sets within a collection can be viewed with the ~list~ command
#+begin_example
data> list
#+end_example

This lists the data sets present in the collection at the top of the stack. To view the data sets of another collection, provide its name to the ~list~ command.
#+begin_example
data> list OTHER DATA COLLECTION
#+end_example

One may also view a particular data set in more detail using the ~show~  command.
Simply give a data ~Identifier~ and it will resolve it --- much like the ~dataset~ function, but without requiring you to leave the Data REPL.
#+begin_example
show IDENTIFIER
#+end_example

** Creating a new data set

*** From scratch

*** From a storage location

** Removing a data set

** Creating new REPL commands

The Data REPL can be easily extended in just a few steps.

First, one must create a ~ReplCmd~ object, like so:
#+begin_src julia
ReplCmd{:demo}("A demo command", _ -> "Hello")
#+end_src

#+begin_src @docs
ReplCmd
#+end_src

Then, simply push this to the global vector ~REPL_CMDS~. You can now call the ~demo~ command in the Data REPL.
#+begin_example
data> demo
"hello"
#+end_example

An expanded help message can be provided by adding a method to the ~help~ function as follows:
#+begin_src julia
function help(::ReplCmd{:demo})
    println(stderr, "This is a demo command created for the Data REPL documentation.")
end
#+end_src

This will be shown when calling the ~help~ command on ~demo~. By default, the
short description given when creating ~ReplCmd{:demo}~ is used. The short
description is always used in the help table.
#+begin_example
data> help
 Command  Shorthand  Action                                                  
 ──────────────────────────────────
 demo                A demo command
 ...                 ...
 
data> help demo
This is a demo command created for the Data REPL
#+end_example

Completions can also be provided by adding a method to the ~completion~ function.
#+begin_src julia
function completions(::ReplCmd{:demo}, input::AbstractString)
    filter(s -> startswith(s, "input"), ["hi", "hello", "howdy"])
end
#+end_src

For reference, the default implementations of ~help~ and ~completions~ are as follows:
#+begin_src julia
help(r::ReplCmd) = println(stderr, r.description)
completions(::ReplCmd, ::AbstractString) = String[]
#+end_src
